
Tutorial Challenges


Challenge 1

Objective: Fill in the boilerplate React code required to render an
unordered list (<ul>) to the page. The list should contain 3 list items
(<li>) with anything in them you want.

HINTS:
import the libraries you need first
use one of the libraries to render some JSX to the page


Challenge 2

Objectives:
1. Set up the basic React code from scratch
2. Create a functional component called MyInfo that returns the following UI:
   a. An h1 with your name
   b. A paragraph with a little blurb about yourself
   c. An ordered or unordered list of the top 3 vacation spots you'd like to visit
3. Render an instance of that functional component to the browser
Extra challenge: learn on your own (Google!) how you can add some style to your page.
(We will also cover this in an upcoming lesson).


Challenge 3

Set up the React app from scratch
Render an App component (defined in a separate file)
Inside App, render:
1. A Navbar component
2. A MainContent component
3. A Footer component


Challenge 4

One LAST time in this course, set up a React app from scratch
Render an <App /> component
 App should be in its own file
App should render 5 <Joke /> components
Each Joke should receive a "question" prop and a "punchLine" prop and render those however you'd like
  
EXTRA CREDIT:
Some jokes are only a punch line with no question: E.g.: "Itâ€™s hard to explain puns to kleptomaniacs because they always take things literally."
If you don't pass in a "question" prop, how might you make it only show the punchline instead?
Spend time practicing the style of your Joke component


Challenge 5

Given a list of products (as an array of objects, as seen in productsData.js)
render a <Product /> component (which you'll also need to create) for each
product in the list.

Make sure to use the array's `.map()` method to create these components, and 
don't forget to pass a `key` prop to it to avoid the warning.


Challenge 6

Let's practice props and mapping components on our todo list app!

I've created a js file with some todos data in it, which I'm imported into this file. (Normally this data would come from an API call, not a local file). 

Challenge: Using the array map method, render a child component for each todo item in the todosData array and pass the relevant data to it.


Challenge 7

Class based component practice
1. Convert all 3 components to be class-based
2. Fix the small bug


Challenge 8

Given an incomplete class-based component without a constructor, 
add a constructor and initialize state to fix the broken component.


Challenge 9

// Given a stateless functional component, add state to it
// state should have a property called `isLoggedIn` which is a boolean
// (true if logged in, false if not)
// Then, give your best shot at rendering the word "in" if the user is logged in
// or "out" if the user is logged out.


Challenge 10

In the previous iteration of this todo list app, we pulled in todos data from a JSON file and mapped over it to display the todo items.
Eventually we'll want to be able to modify the data, which will only happen if we've "loaded" the data in to the component's state
Challenge: Change the <App /> component into a stateful class component and load the imported `todosData` into state.


Challenge 11

Challenge: Get rid of our warning about not having an onChange on our input. For now, the function that runs onChange can simply console.log something.
 

Challenge 12

 Let's make it so our checkbox can actually mark our todo as complete or incomplete!
 This challenge is a little more involved than some of the past ones. Check the comments 
 in the code for some help on accomplishing this one

 Challenge: 
 1. Create an event handler in the App component for when the checkbox is clicked (which is an `onChange` event)
 a. This method will be the trickiest part. Check the comments in the stubbed-out method below for some pseudo code to help guide you through this part
 2. Pass the method down to the TodoItem component
 3. In the TodoItem component, make it so when the `onChange` event happens, it calls the `handleChange` method and passes the id of the todo into the function

 handleChange(id)
 // Update state so that the item with the given id flips `completed` from false to true (or vise versa)
        // Remember not to modify prevState directly, but instead to return a new version of state with the change you want included in that update. (Think how you might use the `.map` method to do this)


Challenge 13

Given a stateless functional component:
1. Follow the steps necessary to add state to it,
    // class-based component
    // constructor method
2. Have state keep track of whether the user is logged in or not
3. Add a button that logs the user in/out
    a. extra challenge - make the button display "log in" if they're not logged in and "log out" if they are
4. Display text that says "Logged in" if the user is logged in, or "Logged out" if they're not.


Challenge 14

Style the completed todo items differently from the incomplete items.


Challenge 15

 * Remember to use the concept of controlled forms
 * https://reactjs.org/docs/forms.html
 * 
 * All information should be populating the text below the form in real-time
 * as you're filling it out
 * 
 * This exercise is adapted from the V School curriculum on vanilla JS forms:
 * https://coursework.vschool.io/travel-form/
 * 
 * All of our challenges and learning resources are open for the public
 * to play around with and learn from at https://coursework.vschool.io

Challenge instructions are written in App.js

 */

 
 
